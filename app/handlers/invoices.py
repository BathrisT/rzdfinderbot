import datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types.message import Message
from aiogram.types.callback_query import CallbackQuery
from aiogram.types.labeled_price import LabeledPrice
from aiogram.types.pre_checkout_query import PreCheckoutQuery
from cruds.users import UserManager
from database import async_session_maker

from keyboards.invoices import create_invoice_keyboard
from keyboards.start import return_to_start_keyboard
from models.users import UserModel
from schemas.users import UserUpdateSchema
from utils.delete_state_messages import delete_state_messages

router = Router()


@router.callback_query(F.data == 'create_invoice')
async def create_invoice(callback: CallbackQuery, state: FSMContext):
    invoice_link = await callback.bot.create_invoice_link(
        title='üöÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –†–ñ–î',
        description='30 –¥–Ω–µ–π',
        payload=f'{callback.from_user.id}_1month_{callback.message.message_id}',
        provider_token='381764678:TEST:75410',  # TODO: –±—Ä–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        currency='RUB',
        prices=[LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π', amount='10000')]
    )
    text = '–î–ª—è –æ–ø–ª–∞—Ç—ã/–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ'

    await callback.bot.send_message(
        text=text,
        chat_id=callback.from_user.id,
        parse_mode='HTML',
        reply_markup=create_invoice_keyboard(invoice_link=invoice_link)
    )

    #  –ó–∞–Ω–æ—Å–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—á–µ—Ç –≤ –±–¥
    # async with async_session_maker() as session:
    #     invoice_crud = InvoiceManager(session=session)
    #     await invoice_crud.create(InvoiceCreateSchema())
    #     await session.commit()

    await delete_state_messages(
        query=callback,
        state=state
    )


@router.pre_checkout_query()
async def pre_checkout_query(query: PreCheckoutQuery):
    await query.answer(ok=True)


@router.message(F.successful_payment)
async def handle_successful_payment(message: Message, current_user: UserModel, state: FSMContext):
    tg_user_id, date_string, invoice_message_id = message.successful_payment.invoice_payload.split('_')

    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–±–∞–≤–∏—Ç—å
    subscription_add_date = datetime.timedelta(days=0)
    if date_string == '1month':
        subscription_add_date = datetime.timedelta(days=30)

    # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫—É—é –¥–∞—Ç—É –∑–∞–Ω–µ—Å—Ç–∏ –≤ –±–¥
    new_subscription_date = current_user.subscription_expires_at
    if new_subscription_date is None or new_subscription_date < datetime.datetime.utcnow():
        new_subscription_date = datetime.datetime.utcnow()
    new_subscription_date += subscription_add_date

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —É —é–∑–µ—Ä–∞
    async with async_session_maker() as session:
        user_crud = UserManager(session=session)
        await user_crud.update(
            obj_id=current_user.id,
            obj_in=UserUpdateSchema(subscription_expires_at=new_subscription_date)
        )
        await session.commit()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—á–µ—Ç–æ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã
    try:
        await message.bot.delete_message(
            chat_id=message.from_user.id,
            message_id=invoice_message_id
        )
    except Exception:
        pass

    text = (
f'''
<b>‚ö°Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞</b>

–¢–µ–ø–µ—Ä—å –≤—ã –∏–º–µ–µ—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, <b>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>

<i>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {new_subscription_date.strftime('%d.%m.%Y %H:%M')}</i>
'''
    )
    await message.answer(
        text=text,
        parse_mode='HTML',
        reply_markup=return_to_start_keyboard(text='üí´ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ')
    )
