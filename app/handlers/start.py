import datetime
from typing import Union

from aiogram import Router, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types.callback_query import CallbackQuery
from aiogram.types.message import Message
from cruds.tracking_notifications import TrackingNotificationManager
from sqlalchemy.ext.asyncio.session import AsyncSession

from config import Config
from cruds.trackings import TrackingManager
from filters.not_answered_trackings_exists_filter import NotAnsweredTrackingsExistsFilter
from filters.start_args_filter import StartArgsFilter
from filters.subscription_filter import SubscriptionFilter

from keyboards.start import start_keyboard_without_subscription, start_keyboard_with_subscription, \
    return_to_start_keyboard
from models.users import UserModel
from utils.add_messages_in_state_to_delete import add_messages_in_state_to_delete

router = Router()


@router.callback_query(F.data == 'start', SubscriptionFilter(checking_for_lack=True))
@router.message(Command('start'), StartArgsFilter(finding_startswith=None), SubscriptionFilter(checking_for_lack=True))
async def start_without_subscription(
        query: Union[Message, CallbackQuery],
        state: FSMContext,
        config: Config
):
    await state.set_state(None)

    text = (
'''
üöÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ –ø–æ –ø–æ–∏—Å–∫—É/–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é –±–∏–ª–µ—Ç–æ–≤ –†–ñ–î

<b>üí´ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ã, –≥–¥–µ –≤—Å—ë —É–∂–µ —Ä–∞—Å–∫—É–ø–ª–µ–Ω–æ. –ö–∞–∫ —ç—Ç–æ —É—Å—Ç—Ä–æ–µ–Ω–æ:</b>

1. <b>–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É</b>, –≤ –∫–æ—Ç–æ—Ä–æ–π —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –º–∞—Ä—à—Ä—É—Ç –ø–æ–µ–∑–¥–∞, –¥–∞—Ç—É –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
2. <b>–ú—ã —Å—Ä–∞–∑—É –∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç—É –∑–∞—è–≤–∫—É.</b> –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –Ω–æ–≤—ã—Ö) –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –ø–æ–µ–∑–¥–∞ –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ
3. <b>–í–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.</b> –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∫—É–ø–∏—Ç—å –ø–æ—è–≤–∏–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ

–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ 100–†/–º–µ—Å—è—Ü –∏ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ
'''
    )
    sent_message = await query.bot.send_message(
        chat_id=query.from_user.id,
        text=text,
        parse_mode='HTML',
        reply_markup=start_keyboard_without_subscription(
            reviews_link=config.links.reviews_link,
            channel_link=config.links.channel_link,
            support_link=config.links.support_link,
        ),
        disable_web_page_preview=True
    )
    await add_messages_in_state_to_delete(
        query=query,
        state=state,
        messages=[sent_message]
    )


@router.callback_query(
    F.data == 'start',
    SubscriptionFilter(checking_for_lack=False),
    NotAnsweredTrackingsExistsFilter(check_for_lack=True)
)
@router.message(
    Command('start'),
    StartArgsFilter(finding_startswith=None),
    SubscriptionFilter(checking_for_lack=False),
    NotAnsweredTrackingsExistsFilter(check_for_lack=True)
)
async def start_with_subscription(
        query: Union[Message, CallbackQuery],
        current_user: UserModel,
        state: FSMContext,
        session: AsyncSession,
        config: Config
):
    await state.set_state(None)

    tracking_manager = TrackingManager(session=session)
    user_trackings = await tracking_manager.get_user_trackings(user_id=current_user.id, only_active=True)
    text = (
f'''
üöÖ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞ –ø–æ –ø–æ–∏—Å–∫—É/–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é –±–∏–ª–µ—Ç–æ–≤ –†–ñ–î

<b>üí´ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ã, –≥–¥–µ –≤—Å—ë —É–∂–µ —Ä–∞—Å–∫—É–ø–ª–µ–Ω–æ. –ö–∞–∫ —ç—Ç–æ —É—Å—Ç—Ä–æ–µ–Ω–æ:</b>

1. <b>–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É</b>, –≤ –∫–æ—Ç–æ—Ä–æ–π —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –º–∞—Ä—à—Ä—É—Ç –ø–æ–µ–∑–¥–∞, –¥–∞—Ç—É –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
2. <b>–ú—ã —Å—Ä–∞–∑—É –∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç—É –∑–∞—è–≤–∫—É.</b> –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –Ω–æ–≤—ã—Ö) –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –ø–æ–µ–∑–¥–∞ –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ
3. <b>–í–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.</b> –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∫—É–ø–∏—Ç—å –ø–æ—è–≤–∏–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ

üóÇ <b>–¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b> {len(user_trackings)} —à—Ç
üé´ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ –¥–æ:</b> {current_user.subscription_expires_at.strftime('%d.%m.%Y %H:%M')}

<a href='{config.links.reviews_link}'>–û—Ç–∑—ã–≤—ã</a> | <a href='{config.links.channel_link}'>–ö–∞–Ω–∞–ª</a> | <a href='{config.links.support_link}'>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</a>
'''
    )
    sent_message = await query.bot.send_message(
        chat_id=query.from_user.id,
        text=text,
        parse_mode='HTML',
        reply_markup=start_keyboard_with_subscription(),
        disable_web_page_preview=True
    )
    await add_messages_in_state_to_delete(
        query=query,
        state=state,
        messages=[sent_message]
    )


@router.callback_query(
    F.data == 'start',
    SubscriptionFilter(checking_for_lack=False),
    NotAnsweredTrackingsExistsFilter(check_for_lack=False)
)
@router.message(
    Command('start'),
    StartArgsFilter(finding_startswith=None),
    SubscriptionFilter(checking_for_lack=False),
    NotAnsweredTrackingsExistsFilter(check_for_lack=False)
)
async def start_with_subscription_and_not_answered_trackings(
        query: Union[Message, CallbackQuery],
        current_user: UserModel,
        state: FSMContext,
        session: AsyncSession,
        config: Config
):
    tracking_manager = TrackingManager(session=session)
    not_answered_trackings = await tracking_manager.get_user_trackings_with_not_answered_notification(
        user_id=current_user.id
    )
    #print(not_answered_trackings)

    tracking_id_to_last_notification_message_id_map = {}
    tracking_notification_manager = TrackingNotificationManager(session=session)
    for tracking in not_answered_trackings:
        last_notification = await tracking_notification_manager.get_last_notification_by_tracking_id(
            tracking_id=tracking.id
        )
        tracking_id_to_last_notification_message_id_map[tracking.id] = last_notification.telegram_message_id

    if len(not_answered_trackings) == 1:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        text = (
            '‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.</b> '
            '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ. –°–ø–∞—Å–∏–±–æ :)\n\n'
            '<i>‚ÑπÔ∏è –ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, '
            '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –∏ —É –≤–∞—Å –≤–µ—Ä–Ω–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</i>'
        )
        sent_message = await query.bot.send_message(
            text=text,
            chat_id=query.from_user.id,
            parse_mode='HTML',
            reply_to_message_id=tracking_id_to_last_notification_message_id_map[not_answered_trackings[0].id],
            reply_markup=return_to_start_keyboard(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å')
        )
        sent_messages = [sent_message]
    else:
        sent_messages = []
        text = (
            '‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, '
            '<b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (–º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏—Ö –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö).</b> '
            '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ. –°–ø–∞—Å–∏–±–æ :)\n\n'
            '<i>‚ÑπÔ∏è –ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, '
            '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –∏ —É –≤–∞—Å –≤–µ—Ä–Ω–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</i>'
        )
        first_sent_message = await query.bot.send_message(
            text=text,
            chat_id=query.from_user.id,
            parse_mode='HTML',
            reply_markup=return_to_start_keyboard(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å')
        )
        sent_messages.append(first_sent_message)
        for tracking in not_answered_trackings:
            text = f'–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é #{tracking.id}'
            sent_message = await query.bot.send_message(
                text=text,
                chat_id=query.from_user.id,
                parse_mode='HTML',
                reply_to_message_id=tracking_id_to_last_notification_message_id_map[tracking.id]
            )
            sent_messages.append(sent_message)

    await add_messages_in_state_to_delete(
        query=query,
        state=state,
        messages=sent_messages
    )
