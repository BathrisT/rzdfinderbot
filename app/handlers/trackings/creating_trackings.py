import datetime
from typing import Union

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from sqlalchemy.ext.asyncio.session import AsyncSession

from config import Config
from cruds.trackings import TrackingManager
from handlers.trackings.editing_tracking import send_tracking_menu
from keyboards.trackings import start_create_tracking_from_scratch_kb, skip_max_price_kb
from models.users import UserModel
from states.creating_tracking import CreatingTracking
from utils.add_messages_in_state_to_delete import add_messages_in_state_to_delete
from utils.rzd_parser import RZDParser

# TODO: –ø–æ–≤–µ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ —á–µ–ª –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É
router = Router()


# TODO: —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–æ, —á—Ç–æ —É —é–∑–µ—Ä–∞ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ –±–¥
@router.callback_query(F.data == 'create_tracking')
async def start_create_tracking_with_existing_trackings(
        callback: CallbackQuery,
        current_user: UserModel,
        state: FSMContext,
        config: Config,
        session: AsyncSession
):
    tracking_manager = TrackingManager(session=session)
    user_trackings = await tracking_manager.get_user_trackings(user_id=callback.from_user.id, only_active=False)

    #  TODO: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π. –ï—Å–ª–∏ —É–∂–µ –±–æ–ª—å—à–µ 10, —Ç–æ –Ω–µ–ª—å–∑—è

    text = (
        f"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö, –∑–∞—Ç–µ–º –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. "
        f"–ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è. "
        f"<b>–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π</b>:\n\n"
        f"<i>‚ÑπÔ∏è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</i>\n"
    )

    # –°—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏–Ω–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (from_city_id, to_city_id, max_price
    added_trackings = set()

    for tracking in user_trackings:
        current_tracking_tuple = (tracking.from_city_id, tracking.to_city_id, tracking.max_price)

        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç —É–∂–µ –≤—ã–≤–æ–¥–∏–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        if current_tracking_tuple in added_trackings:
            continue

        added_trackings.add(current_tracking_tuple)

        text += (
            '\n'
            f'<a href="https://t.me/{config.tg_bot.username}?start=tracking_copy_{tracking.id}">'
            f'üíæ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç {tracking.created_at.strftime("%d.%m.%Y")}: </a>\n'
            f'<b>–û—Ç–∫—É–¥–∞:</b> {tracking.from_city_name}\n'
            f'<b>–ö—É–¥–∞:</b> {tracking.to_city_name}\n'
        )
        if tracking.max_price:
            text += f'<b>–¶–µ–Ω–∞ –¥–æ:</b> {tracking.max_price}‚ÇΩ\n'

        if len(added_trackings) == 4:
            break

    sent_message = await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text=text,
        parse_mode='HTML',
        reply_markup=start_create_tracking_from_scratch_kb(),
        disable_web_page_preview=True
    )

    await add_messages_in_state_to_delete(
        query=callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )


def _get_current_stage_text(current_stage: int):
    return (
        f'‚Äî‚Äî‚Äî\n'
        f'<i>–®–∞–≥ {current_stage} –∏–∑ {len(CreatingTracking.__states__)}</i>'
    )


@router.callback_query(F.data == 'create_tracking_from_scratch')
async def start_create_tracking_from_scratch(
        callback: CallbackQuery,
        state: FSMContext
):
    text = (
        f'<b>–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥</b>, –æ—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–µ–∑–¥\n'
        f'{_get_current_stage_text(1)}'
    )
    sent_message = await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text=text,
        parse_mode='HTML'
    )

    await add_messages_in_state_to_delete(
        query=callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )

    await state.set_state(CreatingTracking.city_from)
    # –ó–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –î–∞–ª–µ–µ –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
    await state.update_data({
        'tracking_data': {
            'from_city_name': None,
            'from_city_id': None,

            'to_city_name': None,
            'to_city_id': None,

            'date': None,
            'max_price': None
        }
    })


@router.message(F.text, StateFilter(CreatingTracking.city_from, CreatingTracking.city_to))
async def handle_city(
        message: Message,
        state: FSMContext,
        rzd_parser: RZDParser
):
    current_state = await state.get_state()
    if current_state == CreatingTracking.city_from:
        current_stage_number = 1
    else:
        current_stage_number = 2

    # –∏—â–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    cities = await rzd_parser.get_cities_by_query(message.text)
    # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Ç–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞
    if len(cities) == 0:
        city_type_text = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è' if current_state == CreatingTracking.city_from else '–ø—Ä–∏–±—ã—Ç–∏—è'
        text = (
            f'–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥ {city_type_text} :(\n\n'
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ <b>–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>\n'
            f'{_get_current_stage_text(current_stage_number)}'
        )
        sent_message = await message.bot.send_message(
            chat_id=message.from_user.id,
            text=text,
            parse_mode='HTML'
        )
        await add_messages_in_state_to_delete(
            query=message,
            state=state,
            messages=[sent_message],
            delete_prev_messages=True
        )
        return

    selected_city = cities[0]
    tracking_data: dict = (await state.get_data())['tracking_data']

    if current_state == CreatingTracking.city_from:
        text = (
            f'–û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≥–æ—Ä–æ–¥, –æ—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–µ–∑–¥\n'
            f'\n'
            f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è</b>\n'
            f'{_get_current_stage_text(2)}'
        )
        tracking_data.update({
            'from_city_name': selected_city.name,
            'from_city_id': selected_city.station_code,
        })
    else:
        text = (
            f'–û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è\n'
            f'\n'
            f'–°–µ–π—á–∞—Å —É–∫–∞–∂–∏—Ç–µ <b>–¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ (–¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∞)</b>\n\n'
            f'–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú\n'
            f'–ü—Ä–∏–º–µ—Ä: {datetime.datetime.utcnow().strftime("%d.%m.%Y")}\n'
            f'{_get_current_stage_text(3)}'
        )
        tracking_data.update({
            'to_city_name': selected_city.name,
            'to_city_id': selected_city.station_code,
        })

    sent_message = await message.bot.send_message(
        chat_id=message.from_user.id,
        text=text,
        parse_mode='HTML'
    )
    await add_messages_in_state_to_delete(
        query=message,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )

    if current_state == CreatingTracking.city_from:
        await state.set_state(CreatingTracking.city_to)
    else:
        await state.set_state(CreatingTracking.date)

    await state.update_data({'tracking_data': tracking_data})


@router.message(F.text, StateFilter(CreatingTracking.date))
async def handle_date(
        message: Message,
        state: FSMContext,
):
    error_text_ending = (
        f'\n'
        f'–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú\n'
        f'–ü—Ä–∏–º–µ—Ä: {datetime.datetime.utcnow().strftime("%d.%m.%Y")}\n'
        f'{_get_current_stage_text(3)}'
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã (–ø–æ–ø—ã—Ç–∫–∞ —Å–ø–∞—Ä—Å–∏—Ç—å)
    date_parsed = False
    try:
        date = datetime.datetime.strptime(message.text, '%d.%m.%Y')
        date_parsed = True
    except ValueError:
        try:
            date = datetime.datetime.strptime(f'{message.text}.{datetime.date.today().year}', '%d.%m.%Y')
            date_parsed = True
        except ValueError:
            pass

    if not date_parsed:
        text = (
            '<b>–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.</b> –£–∫–∞–∂–∏—Ç–µ –µ—ë —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç\n'
            f'{error_text_ending}'
        )
        sent_message = await message.bot.send_message(
            chat_id=message.from_user.id,
            text=text,
            parse_mode='HTML'
        )
        await add_messages_in_state_to_delete(
            query=message,
            state=state,
            messages=[sent_message],
            delete_prev_messages=True
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –¥–∞—Ç–∞ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∞  # TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–µ–π—Å —Å —Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞
    if (date + datetime.timedelta(days=1)) < datetime.datetime.utcnow():
        text = (
            '<b>–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ—à–ª–∞.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n'
            f'{error_text_ending}'
        )
        sent_message = await message.bot.send_message(
            chat_id=message.from_user.id,
            text=text,
            parse_mode='HTML'
        )
        await add_messages_in_state_to_delete(
            query=message,
            state=state,
            messages=[sent_message],
            delete_prev_messages=True
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –¥–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç —Å–µ–≥–æ–¥–Ω—è
    if date > datetime.datetime.utcnow() + datetime.timedelta(days=180):
        text = (
            '<b>–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª—ë–∫—É—é –¥–∞—Ç—É.</b> '
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è\n'
            f'{error_text_ending}'
        )
        sent_message = await message.bot.send_message(
            chat_id=message.from_user.id,
            text=text,
            parse_mode='HTML'
        )
        await add_messages_in_state_to_delete(
            query=message,
            state=state,
            messages=[sent_message],
            delete_prev_messages=True
        )
        return

    text = (
        '–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!\n\n'
        '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤—ã –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç.</b> '
        '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —ç—Ç–∞–ø, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n'
        f'{_get_current_stage_text(4)}'
    )

    sent_message = await message.bot.send_message(
        chat_id=message.from_user.id,
        text=text,
        parse_mode='HTML',
        reply_markup=skip_max_price_kb()
    )
    await add_messages_in_state_to_delete(
        query=message,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )

    tracking_data: dict = (await state.get_data())['tracking_data']
    tracking_data.update({
        'date': date.date().isoformat()
    })
    await state.set_state(CreatingTracking.max_price)
    await state.update_data({'tracking_data': tracking_data})


@router.callback_query(F.data == 'creating_tracking_skip_max_price')
@router.message(F.text, StateFilter(CreatingTracking.max_price))
async def handle_max_price(
        message_or_callback: Union[Message, CallbackQuery],
        state: FSMContext
):
    if type(message_or_callback) is CallbackQuery:
        max_price = None
    else:
        try:
            max_price = float(message_or_callback.text)
        except ValueError:
            text = (
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–º <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤—ã –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç.</b> '
                '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —ç—Ç–∞–ø, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n'
                f'{_get_current_stage_text(4)}'
            )
            sent_message = await message_or_callback.bot.send_message(
                chat_id=message_or_callback.from_user.id,
                text=text,
                parse_mode='HTML',
                reply_markup=skip_max_price_kb()
            )
            await add_messages_in_state_to_delete(
                query=message_or_callback,
                state=state,
                messages=[sent_message],
                delete_prev_messages=True
            )
            return

    tracking_data: dict = (await state.get_data())['tracking_data']
    tracking_data.update({
        'max_price': max_price
    })
    await state.update_data({'tracking_data': tracking_data})

    sent_message = await send_tracking_menu(
        user=message_or_callback.from_user,
        bot=message_or_callback.bot,
        tracking_data=tracking_data
    )

    await add_messages_in_state_to_delete(
        query=message_or_callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )

    await state.set_state(None)  # TODO: –ø–æ—Å—Ç–∞–≤–∏—Ç—å —à—Ç–µ–π—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
