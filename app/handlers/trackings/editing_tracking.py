import datetime
from typing import Union

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, User
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from sqlalchemy.ext.asyncio.session import AsyncSession

from config import Config
from cruds.trackings import TrackingManager
from keyboards.start import return_to_start_keyboard
from keyboards.trackings import start_create_tracking_from_scratch_kb, skip_max_price_kb, edit_tracking_kb, \
    back_to_tracking_kb, edit_max_price_kb, seats_found_kb, edit_seats_types_kb
from models.users import UserModel
from schemas.trackings import TrackingCreateSchema, TrackingUpdateSchema
from states.editing_tracking import EditingTracking
from utils.add_messages_in_state_to_delete import add_messages_in_state_to_delete
from utils.filter_trains import filter_trains_by_tracking
from utils.rzd_links_generator import create_url_to_trains
from utils.rzd_parser import RZDParser

router = Router()

async def send_tracking_menu(
        user: User,
        bot: Bot,
        tracking_data: dict,
        additional_text: str = '',
        return_callback_data: str = 'start'
) -> Message:
    """
    tracking_data –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:

    {'from_city_name': '–ö–∏—Ä–æ–≤', 'from_city_id': '2060600', 'from_city_site_code': 'awd',
    'to_city_name': '–ú–æ—Å–∫–≤–∞', 'to_city_id': '2000000', 'to_city_site_code': 'awd1',
    'date': '2024-02-28', 'max_price': 1300.0}

    –∏–ª–∏

    'from_city_name': '–ö–∏—Ä–æ–≤', 'from_city_id': '2060600', 'from_city_site_code': 'awd',
    'to_city_name': '–ú–æ—Å–∫–≤–∞', 'to_city_id': '2000000', 'to_city_site_code': 'awd1',
    'date': '2024-02-28', 'max_price': None, 'tracking_id': 12}
    """

    tracking_id = tracking_data.get('tracking_id')

    from_city_name = tracking_data['from_city_name']
    from_city_id = tracking_data['from_city_id']
    from_city_site_code = tracking_data['from_city_site_code']

    to_city_name = tracking_data['to_city_name']
    to_city_id = tracking_data['to_city_id']
    to_city_site_code = tracking_data['to_city_site_code']

    # –§–ª–∞–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–≤, —Å–∏–¥
    sw_enabled = tracking_data['sw_enabled']
    sid_enabled = tracking_data['sid_enabled']

    # –§–ª–∞–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–ª–∞—Ü–∫–∞—Ä—Ç–Ω—ã–º –º–µ—Å—Ç–∞–º
    plaz_seats_plaz_down_enabled = tracking_data['plaz_seats_plaz_down_enabled']
    plaz_seats_plaz_up_enabled = tracking_data['plaz_seats_plaz_up_enabled']
    plaz_side_down_enabled = tracking_data['plaz_side_down_enabled']
    plaz_side_up_enabled = tracking_data['plaz_side_up_enabled']

    # –§–ª–∞–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫—É–ø–µ –º–µ—Å—Ç–∞–º
    cupe_up_enabled = tracking_data['cupe_up_enabled']
    cupe_down_enabled = tracking_data['cupe_down_enabled']

    # —Ñ–ª–∞–≥–∏ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    all_plaz_enabled = all((
        plaz_seats_plaz_down_enabled,
        plaz_seats_plaz_up_enabled,
        plaz_side_down_enabled,
        plaz_side_up_enabled,
    ))
    all_cupe_enabled = all((
        cupe_down_enabled,
        cupe_up_enabled
    ))
    all_seats_enabled = all((
        sw_enabled,
        sid_enabled,
        all_plaz_enabled,
        all_cupe_enabled
    ))

    # —Ñ–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç
    not_saved_flag = tracking_data.get('not_saved_flag', False)

    date = datetime.date.fromisoformat(tracking_data['date']) if tracking_data['date'] else None
    max_price = tracking_data['max_price']

    text = ''
    if additional_text:
        text = (
            f'{additional_text}\n'
            f'----\n'
            f'\n'
        )

    if not_saved_flag:
        text += '<i>(–∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)</i> '

    if tracking_id is None:
        text += f'üìó –ù–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:\n\n'
    else:
        text += f'üìó –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ #{tracking_id}:\n\n'

    text += (
        '‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ <b>–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</b> –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.\n'
        '–ö–æ–≥–¥–∞ –≤—ã –ø—Ä–∏–¥–µ—Ç–µ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <b>–Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"</b>\n\n'
    )

    date_text = date.strftime("%d.%m.%Y") if date else '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å'
    text += (
        f'<b>–û—Ç–∫—É–¥–∞:</b> {from_city_name}\n'
        f'<b>–ö—É–¥–∞:</b> {to_city_name}\n'
        f'<b>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> {date_text}\n'
    )
    if max_price is not None:
        text += '<b>–¶–µ–Ω–∞ –¥–æ:</b> {:.2f}‚ÇΩ\n'.format(max_price)

    text_items = []
    if all_seats_enabled:
        text_items.append('–≤—Å–µ')
    else:
        if all_plaz_enabled:
            text_items.append('–ü–ª–∞—Ü –≤—Å–µ')
        else:
            if plaz_seats_plaz_down_enabled:
                text_items.append('–ü–ª–∞—Ü [–Ω–∏–∑]')
            if plaz_seats_plaz_up_enabled:
                text_items.append('–ü–ª–∞—Ü [–≤–µ—Ä—Ö]')
            if plaz_side_down_enabled:
                text_items.append('–ü–ª–∞—Ü –±–æ–∫ [–Ω–∏–∑]')
            if plaz_side_up_enabled:
                text_items.append('–ü–ª–∞—Ü –±–æ–∫ [–≤–µ—Ä—Ö]')
        if all_cupe_enabled:
            text_items.append('–ö—É–ø–µ –≤—Å–µ')
        else:
            if cupe_down_enabled:
                text_items.append('–ö—É–ø–µ [–Ω–∏–∑]')
            if cupe_up_enabled:
                text_items.append('–ö—É–ø–µ [–≤–µ—Ä—Ö]')
        if sid_enabled:
            text_items.append('–°–∏–¥')
        if sw_enabled:
            text_items.append('–°–í')
    text += f'<b>–ú–µ—Å—Ç–∞:</b> {", ".join(text_items)}'

    return await bot.send_message(
        chat_id=user.id,
        text=text,
        parse_mode='HTML',
        reply_markup=edit_tracking_kb(is_new_tracking=(tracking_id is None), return_callback_data=return_callback_data),
        disable_web_page_preview=True
    )

@router.callback_query(F.data == 'edit_tracking')
async def open_tracking(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    tracking_data = (await state.get_data())['tracking_data']
    sent_message = await send_tracking_menu(
        user=callback.from_user,
        bot=callback.bot,
        tracking_data=tracking_data,
    )

    await add_messages_in_state_to_delete(
        query=callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )


@router.callback_query(F.data == 'tracking_edit_from_city')
@router.callback_query(F.data == 'tracking_edit_to_city')
async def edit_city(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'tracking_edit_from_city':
        text = (
            f'<b>–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥</b>, –æ—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–µ–∑–¥\n'
        )
        await state.set_state(EditingTracking.city_from)
    else:
        text = (
            f'–í–≤–µ–¥–∏—Ç–µ <b>–≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è</b>\n'
        )
        await state.set_state(EditingTracking.city_to)

    sent_message = await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text=text,
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=back_to_tracking_kb()
    )

    await add_messages_in_state_to_delete(
        query=callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )


@router.message(StateFilter(EditingTracking.city_from, EditingTracking.city_to))
async def handle_edit_city(
        message: Message,
        state: FSMContext,
        rzd_parser: RZDParser
):
    current_state = await state.get_state()

    # –∏—â–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    cities = await rzd_parser.get_cities_by_query(message.text)
    # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Ç–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞
    if len(cities) == 0:
        city_type_text = '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è' if current_state == EditingTracking.city_from else '–ø—Ä–∏–±—ã—Ç–∏—è'
        text = (
            f'–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥ {city_type_text} :(\n\n'
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ <b>–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>\n'
        )
        sent_message = await message.bot.send_message(
            chat_id=message.from_user.id,
            text=text,
            parse_mode='HTML'
        )
        await add_messages_in_state_to_delete(
            query=message,
            state=state,
            messages=[sent_message],
            delete_prev_messages=True
        )
        return

    selected_city = cities[0]
    tracking_data: dict = (await state.get_data())['tracking_data']

    if current_state == EditingTracking.city_from:
        tracking_data.update({
            'from_city_name': selected_city.name,
            'from_city_id': selected_city.station_code,
            'from_city_site_code': selected_city.site_code,
            'not_saved_flag': True
        })
    else:
        tracking_data.update({
            'to_city_name': selected_city.name,
            'to_city_id': selected_city.station_code,
            'to_city_site_code': selected_city.site_code,
            'not_saved_flag': True
        })
    await state.update_data({'tracking_data': tracking_data})

    sent_message = await send_tracking_menu(
        user=message.from_user,
        bot=message.bot,
        tracking_data=tracking_data,
        additional_text=f'<b>–ì–æ—Ä–æ–¥ '
                        f'{"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è" if current_state == EditingTracking.city_from else "–ø—Ä–∏–±—ã—Ç–∏—è"} '
                        f'—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>'
    )
    await add_messages_in_state_to_delete(
        query=message,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )
@router.callback_query(F.data == 'tracking_edit_date')
async def edit_date(
        callback: CallbackQuery,
        state: FSMContext
):
    await state.set_state(EditingTracking.date)
    text = (
        f'–£–∫–∞–∂–∏—Ç–µ <b>–¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ (–¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∞)</b>\n\n'
        f'–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú\n'
        f'–ü—Ä–∏–º–µ—Ä: {datetime.datetime.utcnow().strftime("%d.%m.%Y")}\n'
    )
    sent_message = await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text=text,
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=back_to_tracking_kb()
    )

    await add_messages_in_state_to_delete(
        query=callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )

@router.message(StateFilter(EditingTracking.date))
async def handle_edit_date(
        message: Message,
        state: FSMContext
):
    error_text_ending = (
        f'\n'
        f'–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú\n'
        f'–ü—Ä–∏–º–µ—Ä: {datetime.datetime.utcnow().strftime("%d.%m.%Y")}\n'
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã (–ø–æ–ø—ã—Ç–∫–∞ —Å–ø–∞—Ä—Å–∏—Ç—å)
    date_parsed = False
    try:
        date = datetime.datetime.strptime(message.text, '%d.%m.%Y')
        date_parsed = True
    except ValueError:
        try:
            date = datetime.datetime.strptime(f'{message.text}.{datetime.date.today().year}', '%d.%m.%Y')
            date_parsed = True
        except ValueError:
            pass

    if not date_parsed:
        text = (
            '<b>–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.</b> –£–∫–∞–∂–∏—Ç–µ –µ—ë —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç\n'
            f'{error_text_ending}'
        )
        sent_message = await message.bot.send_message(
            chat_id=message.from_user.id,
            text=text,
            parse_mode='HTML'
        )
        await add_messages_in_state_to_delete(
            query=message,
            state=state,
            messages=[sent_message],
            delete_prev_messages=True
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –¥–∞—Ç–∞ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∞
    if (date + datetime.timedelta(days=1)) < datetime.datetime.utcnow():
        text = (
            '<b>–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ—à–ª–∞.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n'
            f'{error_text_ending}'
        )
        sent_message = await message.bot.send_message(
            chat_id=message.from_user.id,
            text=text,
            parse_mode='HTML'
        )
        await add_messages_in_state_to_delete(
            query=message,
            state=state,
            messages=[sent_message],
            delete_prev_messages=True
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –¥–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç —Å–µ–≥–æ–¥–Ω—è
    if date > datetime.datetime.utcnow() + datetime.timedelta(days=180):
        text = (
            '<b>–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª—ë–∫—É—é –¥–∞—Ç—É.</b> '
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è\n'
            f'{error_text_ending}'
        )
        sent_message = await message.bot.send_message(
            chat_id=message.from_user.id,
            text=text,
            parse_mode='HTML'
        )
        await add_messages_in_state_to_delete(
            query=message,
            state=state,
            messages=[sent_message],
            delete_prev_messages=True
        )
        return

    tracking_data: dict = (await state.get_data())['tracking_data']
    tracking_data.update({
        'date': date.date().isoformat(),
        'not_saved_flag': True
    })
    await state.set_state(None)
    await state.update_data({'tracking_data': tracking_data})

    sent_message = await send_tracking_menu(
        user=message.from_user,
        bot=message.bot,
        tracking_data=tracking_data,
        additional_text='<b>–î–∞—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>'
    )
    await add_messages_in_state_to_delete(
        query=message,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )


@router.callback_query(F.data == 'tracking_edit_max_price')
async def edit_max_price(
        callback: CallbackQuery,
        state: FSMContext
):
    await state.set_state(EditingTracking.max_price)
    text = (
        '–í–≤–µ–¥–∏—Ç–µ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É</b>, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤—ã –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç, –∏–ª–∏ <b>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"</b>'
    )
    sent_message = await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text=text,
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=edit_max_price_kb()
    )
    await add_messages_in_state_to_delete(
        query=callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )

@router.callback_query(F.data == 'set_null_edit_max_price')
@router.message(StateFilter(EditingTracking.max_price))
async def handle_edit_max_price(
        message_or_callback: Union[Message, CallbackQuery],
        state: FSMContext
):
    if type(message_or_callback) is CallbackQuery:
        max_price = None
    else:
        try:
            max_price = float(message_or_callback.text)
        except ValueError:
            text = (
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–º <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤—ã –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç.</b> '
                '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —ç—Ç–∞–ø, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n'
            )
            sent_message = await message_or_callback.bot.send_message(
                chat_id=message_or_callback.from_user.id,
                text=text,
                parse_mode='HTML',
                reply_markup=skip_max_price_kb()
            )
            await add_messages_in_state_to_delete(
                query=message_or_callback,
                state=state,
                messages=[sent_message],
                delete_prev_messages=True
            )
            return

    tracking_data: dict = (await state.get_data())['tracking_data']
    tracking_data.update({
        'max_price': max_price
    })
    await state.update_data({
        'tracking_data': tracking_data,
        'not_saved_flag': True
    })

    sent_message = await send_tracking_menu(
        user=message_or_callback.from_user,
        bot=message_or_callback.bot,
        tracking_data=tracking_data
    )

    await add_messages_in_state_to_delete(
        query=message_or_callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )

    await state.set_state(None)

@router.callback_query(F.data == 'tracking_edit_seats_types')
async def edit_seats_types(
        callback: CallbackQuery,
        state: FSMContext
):
    await state.set_state(EditingTracking.seats_types)
    tracking_data: dict = (await state.get_data())['tracking_data']
    text = (
        '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ <b>—Ç–∏–ø—ã –º–µ—Å—Ç/–≤–∞–≥–æ–Ω–æ–≤</b> –Ω—É–∂–Ω—ã –≤–∞–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö:\n'
        '‚úÖ - –¢–∏–ø –º–µ—Å—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è\n'
        '‚ùå - –¢–∏–ø –º–µ—Å—Ç–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è'
    )
    sent_message = await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text=text,
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=edit_seats_types_kb(
            sw_enabled=tracking_data['sw_enabled'],
            sid_enabled=tracking_data['sid_enabled'],

            plaz_seats_plaz_down_enabled=tracking_data['plaz_seats_plaz_down_enabled'],
            plaz_seats_plaz_up_enabled=tracking_data['plaz_seats_plaz_up_enabled'],
            plaz_side_down_enabled=tracking_data['plaz_side_down_enabled'],
            plaz_side_up_enabled=tracking_data['plaz_side_up_enabled'],
            cupe_up_enabled=tracking_data['cupe_up_enabled'],
            cupe_down_enabled=tracking_data['cupe_down_enabled'],
        )
    )
    await add_messages_in_state_to_delete(
        query=callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )


@router.callback_query(F.data.startswith('seat_switch_'), StateFilter(EditingTracking.seats_types))
async def handle_edit_seats_types(
        callback: CallbackQuery,
        state: FSMContext
):
    tracking_data: dict = (await state.get_data())['tracking_data']
    switching_seat_type = callback.data.split('seat_switch_')[-1]
    seats_types = [
        'plaz_seats_plaz_down',
        'plaz_seats_plaz_up',
        'plaz_side_down',
        'plaz_side_up',
        'cupe_up',
        'cupe_down',
        'sw',
        'sid',
    ]

    for seat_type in seats_types:
        if seat_type == switching_seat_type:
            tracking_data.update({f'{seat_type}_enabled': not tracking_data[f'{seat_type}_enabled']})

    tracking_data.update({'not_saved_flag': True})
    await state.update_data({'tracking_data': tracking_data})
    await edit_seats_types(
        callback=callback,
        state=state
    )



@router.callback_query(F.data == 'save_tracking')
async def save_tracking(
        callback: CallbackQuery,
        current_user: UserModel,
        state: FSMContext,
        config: Config,
        session: AsyncSession,
        rzd_parser: RZDParser
):
    tracking_data = (await state.get_data())['tracking_data']
    if tracking_data['date'] is None:
        await callback.answer(
            text='‚ùå –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            show_alert=True
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏–µ –±–∏–ª–µ—Ç–æ–≤. –ï—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ (–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á—Ç–æ —Ç–∞–∫–æ–µ –º–Ω–æ–≥–æ),
    #  —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –Ω–µ —Å—Ç–∞–≤–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    sent_message = await send_tracking_menu(
        user=callback.from_user,
        bot=callback.bot,
        tracking_data=tracking_data,
        additional_text='<b>‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...</b>'
    )
    await add_messages_in_state_to_delete(
        query=callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )

    trains_on_this_route = await rzd_parser.get_trains(
        from_city_id=tracking_data['from_city_id'],
        to_city_id=tracking_data['to_city_id'],
        date=datetime.date.fromisoformat(tracking_data['date'])
    )
    specific_trains = filter_trains_by_tracking(
        trains=trains_on_this_route,
        sw_enabled=tracking_data['sw_enabled'],
        sid_enabled=tracking_data['sid_enabled'],
        max_price=tracking_data['max_price'],
        plaz_seats_plaz_down_enabled=tracking_data['plaz_seats_plaz_down_enabled'],
        plaz_seats_plaz_up_enabled=tracking_data['plaz_seats_plaz_up_enabled'],
        plaz_side_down_enabled=tracking_data['plaz_side_down_enabled'],
        plaz_side_up_enabled=tracking_data['plaz_side_up_enabled'],
        cupe_up_enabled=tracking_data['cupe_up_enabled'],
        cupe_down_enabled=tracking_data['cupe_down_enabled'],
        min_seats=2
    )
    if len(specific_trains) > 0:
        url = create_url_to_trains(
            from_city_site_code=tracking_data["from_city_site_code"],
            to_city_site_code=tracking_data["to_city_site_code"],
            date=tracking_data["date"]
        )
        text = (
            '<b>‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É,</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –†–ñ–î'
            '\n\n'
            '<i>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –∏–∑-–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–ª–∏—á–∏—è –º–µ—Å—Ç, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</i>'
        )
        sent_message = await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text=text,
            parse_mode='HTML',
            reply_markup=seats_found_kb(rzd_url=url)
        )
        await add_messages_in_state_to_delete(
            query=callback,
            state=state,
            messages=[sent_message],
            delete_prev_messages=True
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ

    tracking_manager = TrackingManager(session=session)

    # –ï—Å–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–µ

    if 'tracking_id' not in tracking_data:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        repeated_tracking = await tracking_manager.get_by_unique_value(
            user_id=current_user.id,
            from_city_name=tracking_data['from_city_name'],
            from_city_id=tracking_data['from_city_id'],
            from_city_site_code=tracking_data['from_city_site_code'],
            to_city_name=tracking_data['to_city_name'],
            to_city_id=tracking_data['to_city_id'],
            to_city_site_code=tracking_data['to_city_site_code'],
            date=datetime.date.fromisoformat(tracking_data['date']),
            max_price=tracking_data.get('max_price'),
            sw_enabled=bool(tracking_data.get('sw_enabled')),
            sid_enabled=bool(tracking_data.get('sid_enabled')),

            plaz_seats_plaz_down_enabled=bool(tracking_data.get('plaz_seats_plaz_down_enabled')),
            plaz_seats_plaz_up_enabled=bool(tracking_data.get('plaz_seats_plaz_up_enabled')),
            plaz_side_down_enabled=bool(tracking_data.get('plaz_side_down_enabled')),
            plaz_side_up_enabled=bool(tracking_data.get('plaz_side_up_enabled')),
            cupe_up_enabled=bool(tracking_data.get('cupe_up_enabled')),
            cupe_down_enabled=bool(tracking_data.get('cupe_down_enabled')),
            is_finished=False
        )

        if repeated_tracking is not None:
            sent_message = await send_tracking_menu(
                user=callback.from_user,
                bot=callback.bot,
                tracking_data=tracking_data,
                additional_text=f'<b>‚ùå –ê–∫—Ç–∏–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>\n'
                                f'<a href="'
                                f'https://t.me/{config.tg_bot.username}?start=tracking_open_{repeated_tracking.id}'
                                f'">'
                                f'–í–æ—Ç –µ–≥–æ –Ω–æ–º–µ—Ä: #{repeated_tracking.id} (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)'
                                f'</a>'
            )
            await add_messages_in_state_to_delete(
                query=callback,
                state=state,
                messages=[sent_message],
                delete_prev_messages=True
            )
            return

        tracking = await tracking_manager.create(TrackingCreateSchema(
            user_id=current_user.id,
            from_city_name=tracking_data['from_city_name'],
            from_city_id=tracking_data['from_city_id'],
            from_city_site_code=tracking_data['from_city_site_code'],
            to_city_name=tracking_data['to_city_name'],
            to_city_id=tracking_data['to_city_id'],
            to_city_site_code=tracking_data['to_city_site_code'],
            date=tracking_data['date'],
            max_price=tracking_data.get('max_price'),
            sw_enabled=bool(tracking_data.get('sw_enabled')),
            sid_enabled=bool(tracking_data.get('sid_enabled')),

            plaz_seats_plaz_down_enabled=bool(tracking_data.get('plaz_seats_plaz_down_enabled')),
            plaz_seats_plaz_up_enabled=bool(tracking_data.get('plaz_seats_plaz_up_enabled')),
            plaz_side_down_enabled=bool(tracking_data.get('plaz_side_down_enabled')),
            plaz_side_up_enabled=bool(tracking_data.get('plaz_side_up_enabled')),
            cupe_up_enabled=bool(tracking_data.get('cupe_up_enabled')),
            cupe_down_enabled=bool(tracking_data.get('cupe_down_enabled')),
        ))
        tracking_data['tracking_id'] = tracking.id
        saved_text = '<b>‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ</b>'

    else:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —é–∑–µ—Ä—É
        this_tracking = await tracking_manager.get(tracking_data['tracking_id'])
        if current_user.id != this_tracking.user_id:
            return

        await tracking_manager.update(
            obj_id=tracking_data['tracking_id'],
            obj_in=TrackingCreateSchema(
                user_id=current_user.id,
                from_city_name=tracking_data['from_city_name'],
                from_city_id=tracking_data['from_city_id'],
                from_city_site_code=tracking_data['from_city_site_code'],
                to_city_name=tracking_data['to_city_name'],
                to_city_id=tracking_data['to_city_id'],
                to_city_site_code=tracking_data['to_city_site_code'],
                date=tracking_data['date'],
                max_price=tracking_data.get('max_price'),

                sw_enabled=bool(tracking_data.get('sw_enabled')),
                sid_enabled=bool(tracking_data.get('sid_enabled')),

                plaz_seats_plaz_down_enabled=bool(tracking_data.get('plaz_seats_plaz_down_enabled')),
                plaz_seats_plaz_up_enabled=bool(tracking_data.get('plaz_seats_plaz_up_enabled')),
                plaz_side_down_enabled=bool(tracking_data.get('plaz_side_down_enabled')),
                plaz_side_up_enabled=bool(tracking_data.get('plaz_side_up_enabled')),
                cupe_up_enabled=bool(tracking_data.get('cupe_up_enabled')),
                cupe_down_enabled=bool(tracking_data.get('cupe_down_enabled')),
            )
        )
        saved_text = '<b>‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</b>'

    await session.commit()
    tracking_data['not_saved_flag'] = False

    state_data = await state.get_data()
    state_data['tracking_data'] = tracking_data
    await state.set_data(state_data)

    sent_message = await send_tracking_menu(
        user=callback.from_user,
        bot=callback.bot,
        tracking_data=tracking_data,
        additional_text=saved_text
    )
    await add_messages_in_state_to_delete(
        query=callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )

@router.callback_query(F.data == 'finish_tracking')
async def finish_tracking(
        callback: CallbackQuery,
        current_user: UserModel,
        state: FSMContext,
        session: AsyncSession
):
    tracking_manager = TrackingManager(session=session)
    tracking_data = (await state.get_data())['tracking_data']

    this_tracking = await tracking_manager.get(tracking_data['tracking_id'])
    if current_user.id != this_tracking.user_id:
        return

    await tracking_manager.update(
        obj_id=tracking_data['tracking_id'],
        obj_in=TrackingUpdateSchema(is_finished=True)
    )
    await session.commit()

    text = f'üìï –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ #{this_tracking.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
    sent_message = await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text=text,
        parse_mode='HTML',
        reply_markup=return_to_start_keyboard()
    )
    await add_messages_in_state_to_delete(
        query=callback,
        state=state,
        messages=[sent_message],
        delete_prev_messages=True
    )
