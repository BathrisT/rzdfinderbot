import datetime
from typing import Union

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, User
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from sqlalchemy.ext.asyncio.session import AsyncSession

from config import Config
from cruds.trackings import TrackingManager
from keyboards.trackings import start_create_tracking_from_scratch_kb, skip_max_price_kb, edit_tracking_kb
from models.users import UserModel
from states.creating_tracking import CreatingTracking
from utils.add_messages_in_state_to_delete import add_messages_in_state_to_delete
from utils.rzd_parser import RZDParser

# TODO: –ø–æ–≤–µ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ —á–µ–ª –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É
router = Router()

async def send_tracking_menu(user: User, bot: Bot, tracking_data: dict) -> Message:
    """
    tracking_data –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:

    {'from_city_name': '–ö–∏—Ä–æ–≤', 'from_city_id': '2060600', 'to_city_name': '–ú–æ—Å–∫–≤–∞', 'to_city_id': '2000000',
    'date': '2024-02-28', 'max_price': 1300.0}

    –∏–ª–∏

    {'from_city_name': '–ö–∏—Ä–æ–≤', 'from_city_id': '2060600', 'to_city_name': '–ú–æ—Å–∫–≤–∞', 'to_city_id': '2000000',
    'date': '2024-02-28', 'max_price': None, 'tracking_id': 12}
    """

    tracking_id = tracking_data.get('tracking_id')

    from_city_name = tracking_data['from_city_name']
    from_city_id = tracking_data['from_city_id']

    to_city_name = tracking_data['to_city_name']
    to_city_id = tracking_data['to_city_id']

    date = datetime.date.fromisoformat(tracking_data['date'])
    max_price = tracking_data['max_price']

    text = 'üìó –ù–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:\n\n'
    if tracking_id is not None:
        text = f'üìó –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ #{tracking_id}:\n\n'

    text += (
        '‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ <b>–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</b> –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.\n'
        '–ö–æ–≥–¥–∞ –≤—ã –ø—Ä–∏–¥–µ—Ç–µ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <b>–Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"</b>\n\n'
    )

    text += (
        f'<b>–û—Ç–∫—É–¥–∞:</b> {from_city_name}\n'
        f'<b>–ö—É–¥–∞:</b> {to_city_name}\n'
        f'<b>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> {date.strftime("%d.%m.%Y")}\n'
    )
    if max_price is not None:
        text += f'<b>–¶–µ–Ω–∞ –¥–æ:</b> {max_price}‚ÇΩ'

    return await bot.send_message(
        chat_id=user.id,
        text=text,
        parse_mode='HTML',
        reply_markup=edit_tracking_kb(),
        disable_web_page_preview=True
    )
