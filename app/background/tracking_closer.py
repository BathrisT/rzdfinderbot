import asyncio
import datetime
import traceback

from loguru import logger
from aiogram import Bot

from cruds.trackings import TrackingManager
from database import async_session_maker
from models.trackings import TrackingModel
from schemas.trackings import TrackingUpdateSchema

# TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
class TrackingCloser:
    def __init__(self, aiogram_bot_token: str, tg_bot_username: str):
        self._aiogram_bot = Bot(token=aiogram_bot_token)
        self._tg_bot_username = tg_bot_username

    @staticmethod
    async def close_tracking(tracking_id: int):
        async with async_session_maker() as session:
            tracking_manager = TrackingManager(session=session)
            await tracking_manager.update(
                obj_id=tracking_id,
                obj_in=TrackingUpdateSchema(
                    is_finished=True,
                    finished_at=datetime.datetime.utcnow()
                )
            )
            await session.commit()

    async def send_tracking_closed_notification(self, deleted_tracking: TrackingModel, user_id: int):
        text = (
            f'<b>üìï –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ #{deleted_tracking.id}</b> –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n\n'
            f'<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏:</b>\n'
            f'–û—Ç–∫—É–¥–∞: {deleted_tracking.from_city_name}\n'
            f'–ö—É–¥–∞: {deleted_tracking.to_city_name}\n'
            f'–î–∞—Ç–∞: {deleted_tracking.date.strftime("%d.%m.%Y")}\n\n'
            f'–í—ã –º–æ–∂–µ—Ç–µ <a href="https://t.me/{self._tg_bot_username}?start=tracking_copy_{deleted_tracking.id}">'
            f'–ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏'
            f'</a>'
        )
        try:
            await self._aiogram_bot.send_message(
                text=text,
                chat_id=user_id,
                disable_web_page_preview=True,
                parse_mode='HTML'
            )
        except Exception:  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —á–∞—Å—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            pass

    async def handle_tracking(self, tracking: TrackingModel):
        filters_without_notifications = [
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω —é–∑–µ—Ä–∞
            tracking.user.is_banned,
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —É —é–∑–µ—Ä–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            tracking.user.subscription_expires_at is None,
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —É —é–∑–µ—Ä–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –±–æ–ª—å—à–µ 3 –¥–Ω–µ–π
            tracking.user.subscription_expires_at is not None and (
                    datetime.datetime.utcnow() > tracking.user.subscription_expires_at + datetime.timedelta(days=3)
            )
        ]
        filters_with_notifications = [
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –¥–Ω—è —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏ —é–∑–µ—Ä –Ω–µ –Ω–∞–∂–∞–ª –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫
            tracking.first_notification_sent_at is not None and (
                    datetime.datetime.utcnow() > tracking.first_notification_sent_at + datetime.timedelta(days=1)
            ),
        ]

        if any(filters_without_notifications + filters_with_notifications):
            logger.info(f'Tracking #{tracking.id} closed')
            await self.close_tracking(tracking_id=tracking.id)

        if any(filters_with_notifications):
            await self.send_tracking_closed_notification(deleted_tracking=tracking, user_id=tracking.user_id)

    async def cycle(self):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        async with async_session_maker() as session:
            tracking_manager = TrackingManager(session=session)
            trackings = await tracking_manager.get_all_tracking(only_active=True)

        for tracking in trackings:
            try:
                await self.handle_tracking(tracking)
            except Exception:
                logger.error(f'Error while handle close tracking #{tracking.id}: \n'
                             f'{traceback.format_exc()}')

    async def start(self):
        logger.info('Background TrackingDBCloser started')

        while True:
            logger.debug('–ó–∞–≤–µ—Ä—à–µ–Ω –∫—Ä—É–≥ –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª–µ–Ω–∏—è')
            try:
                await self.cycle()
            except Exception:
                logger.error(f'Global error in cycle of close trackings: \n'
                             f'{traceback.format_exc()}')
            await asyncio.sleep(60)
