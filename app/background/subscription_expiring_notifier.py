import asyncio
import datetime
import traceback
from typing import Literal

from loguru import logger
from aiogram import Bot

from cruds.users import UserManager
from database import async_session_maker
from models.users import UserModel
from schemas.users import UserUpdateSchema


# TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
class SubscriptionExpiringNotifier:
    def __init__(self, aiogram_bot_token: str, tg_bot_username: str):
        self._aiogram_bot = Bot(token=aiogram_bot_token)
        self._tg_bot_username = tg_bot_username

    async def send_notification(self, notification_type: Literal['3d', '1d', 'after'], user: UserModel):
        text: str = None
        if notification_type == '3d':
            text = (
                '‚ÑπÔ∏è –ß–µ—Ä–µ–∑ <b>3 –¥–Ω—è</b> —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞\n\n'
                '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è'
            )
        elif notification_type == '1d':
            text = (
                '‚ùóÔ∏è–ß–µ—Ä–µ–∑ <b>1 –¥–µ–Ω—å</b> —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞\n\n'
                '–ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è'
            )
        elif notification_type == 'after':
            text = (
                'üìï <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.</b> –ß–µ—Ä–µ–∑ <b>2 –¥–Ω—è</b> –º—ã –∑–∞–≤–µ—Ä—à–∏–º –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n'
                'üí´ –ß—Ç–æ–±—ã <b>–≤–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞</b>, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n\n'
                '<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º</b>'
            )
        try:
            await self._aiogram_bot.send_message(
                text=text,
                chat_id=user.id,
                disable_web_page_preview=True,
                parse_mode='HTML'
            )
        except Exception:  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —á–∞—Å—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            pass

    async def handle_user(self, user: UserModel):
        notification_for_3_days_flag = (
                (
                        (datetime.datetime.utcnow() - datetime.timedelta(days=2))
                        > user.subscription_expires_at >
                        (datetime.datetime.utcnow() - datetime.timedelta(days=3))
                ) and (
                        user.last_expire_notification_sent_at is None
                        or
                        user.last_expire_notification_sent_at < (
                                datetime.datetime.utcnow() - datetime.timedelta(days=1))
                )
        )
        notification_for_1_day_flag = (
                (
                        (datetime.datetime.utcnow() - datetime.timedelta(hours=24))
                        > user.subscription_expires_at >
                        (datetime.datetime.utcnow() - datetime.timedelta(hours=23))
                ) and (
                        user.last_expire_notification_sent_at is None
                        or
                        user.last_expire_notification_sent_at < (
                                    datetime.datetime.utcnow() - datetime.timedelta(hours=2))
                )
        )
        notification_after_expired_subscription_flag = (
                (
                        user.subscription_expires_at < (datetime.datetime.utcnow() - datetime.timedelta(hours=1))
                ) and (
                        user.last_expire_notification_sent_at is None
                        or
                        user.last_expire_notification_sent_at < (
                                datetime.datetime.utcnow() - datetime.timedelta(hours=2))
                )
        )
        if notification_for_3_days_flag:
            await self.send_notification(notification_type='3d', user=user)
        if notification_for_1_day_flag:
            await self.send_notification(notification_type='1d', user=user)
        if notification_after_expired_subscription_flag:
            await self.send_notification(notification_type='after', user=user)

        if any([notification_for_3_days_flag, notification_for_1_day_flag,
                notification_after_expired_subscription_flag]):
            async with async_session_maker() as session:
                user_manager = UserManager(session=session)
                await user_manager.update(
                    obj_id=user.id,
                    obj_in=UserUpdateSchema(last_expire_notification_sent_at=datetime.datetime.utcnow())
                )
                await session.commit()

    async def cycle(self):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤
        async with async_session_maker() as session:
            user_manager = UserManager(session=session)
            users = await user_manager.get_multi(limit=10000000)

        for user in users:
            try:
                await self.handle_user(user)
            except Exception:
                logger.error(f'Error in subscription_expiring_notifier #{user.id}: \n'
                             f'{traceback.format_exc()}')

    async def start(self):
        logger.info('Background SubscriptionExpiringNotifier started')

        while True:
            logger.debug('–ó–∞–≤–µ—Ä—à–µ–Ω –∫—Ä—É–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
            try:
                await self.cycle()
            except Exception:
                logger.error(f'Global error in cycle of SubscriptionExpiringNotifier: \n'
                             f'{traceback.format_exc()}')
            await asyncio.sleep(20)
