import asyncio
import datetime
import traceback
from json import JSONDecodeError
from queue import Queue

from aiogram import Bot
from httpx import TimeoutException
from loguru import logger

from cruds.tracking_notifications import TrackingNotificationManager
from cruds.trackings import TrackingManager
from database import async_session_maker
from keyboards.trackings import found_seats_notification_kb
from models.trackings import TrackingModel
from schemas.rzd_parser import Train
from schemas.tracking_notifications import TrackingNotificationCreateSchema
from schemas.trackings import TrackingUpdateSchema
from utils.filter_trains import filter_trains, check_min_price
from utils.rzd_links_generator import create_url_to_trains
from utils.rzd_parser import RZDParser
from .exceptions import TrackingFinishedException


# TODO: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫  # class logging
# TODO: –ø–æ–¥—É–º–∞—Ç—å —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
class TrackingParser:
    def __init__(
            self,
            aiogram_bot_token: str,
            limit_of_parallel_handlers: int = 15,
    ):
        self._limit_of_parallel_handlers = limit_of_parallel_handlers
        self._current_parallel_handlers = 0
        self._aiogram_bot = Bot(token=aiogram_bot_token)

        self._connection_errors_counter = 0

    async def _get_tracking(
            self,
            queue_tracking_ids: Queue,
            mapping_id_to_tracking: dict[int, TrackingModel]
    ) -> TrackingModel:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        tracking_id: int = queue_tracking_ids.get(block=False)
        if tracking_id not in mapping_id_to_tracking:
            raise TrackingFinishedException(tracking_id=tracking_id)
        return mapping_id_to_tracking[tracking_id]

    async def _put_tracking(
            self,
            tracking: TrackingModel,
            queue_tracking_ids: Queue,
            mapping_id_to_tracking: dict[int, TrackingModel]
    ) -> None:
        """–ó–∞–Ω–µ—Å–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if tracking.id not in mapping_id_to_tracking:
            raise TrackingFinishedException(tracking_id=tracking.id)
        queue_tracking_ids.put(tracking.id)

    @staticmethod
    def _generate_notification_text_from_trains(tracking: TrackingModel, trains: list[Train]) -> str:
        text = f'<b>‚ö°Ô∏è –í–∞–∂–Ω–æ! –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–∏–ª–µ—Ç—ã (#{tracking.id}) ‚ö°Ô∏è</b>\n\n'
        for i, train in enumerate(trains):
            rzd_train_url = create_url_to_trains(
                from_city_site_code=tracking.from_city_site_code,
                to_city_site_code=tracking.to_city_site_code,
                date=tracking.date,
                train_number=train.train_number
            )
            train_text = (
                f'<a href="{rzd_train_url}">–ü–æ–µ–∑–¥ {train.train_number}{" (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)" if i == 0 else ""}:</a>\n'
                f'<b>üìÜ –î–∞—Ç–∞:</b> {train.departure_date.strftime("%d.%m.%Y %H:%M")}\n'
                f'<b>üìå –û—Ç–∫—É–¥–∞:</b> {train.from_city_name}\n'
                f'<b>üéØ –ö—É–¥–∞:</b> {train.to_city_name}\n'
            )
            prices_row = 'üí≥ '
            available_filtered_seats = []
            # train.sw_seats, train.cupe_seats, train.plaz_seats, train.sid_seats
            if train.sw_seats >= 1 and check_min_price(tracking.max_price, train.sw_min_price):
                available_filtered_seats.append(f'<b>–°–í [{train.sw_seats}]</b> - {int(train.sw_min_price)}‚ÇΩ')
            if train.cupe_seats >= 1 and check_min_price(tracking.max_price, train.cupe_min_price):
                available_filtered_seats.append(f'<b>–ö—É–ø–µ [{train.cupe_seats}]</b> - {int(train.cupe_min_price)}‚ÇΩ')
            if train.plaz_seats >= 1 and check_min_price(tracking.max_price, train.plaz_min_price):
                available_filtered_seats.append(f'<b>–ü–ª–∞—Ü [{train.plaz_seats}]</b> - {int(train.plaz_min_price)}‚ÇΩ')
            if train.sid_seats >= 1 and check_min_price(tracking.max_price, train.sid_min_price):
                available_filtered_seats.append(f'<b>–°–∏–¥ [{train.sid_seats}]</b> - {int(train.sid_min_price)}‚ÇΩ')
            prices_row += ', '.join(available_filtered_seats)
            train_text += f'{prices_row}\n\n'
            text += train_text
        deactivate_tracking_time = (
                tracking.first_notification_sent_at + datetime.timedelta(hours=24) - datetime.datetime.utcnow()
        )
        text += (
            f'------\n'
            f'‚ùóÔ∏è–ü–æ—Å–ª–µ —É–¥–∞—á–Ω–æ–π/–Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏, <b>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ</b>, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–º, –≤–∑—è–ª–∏ –≤—ã –±–∏–ª–µ—Ç –∏–ª–∏ –Ω–µ—Ç. '
            f'–ï—Å–ª–∏ –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±–µ—Ä–∏—Ç–µ, <b>–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º —á–µ—Ä–µ–∑ '
            f'{str(deactivate_tracking_time).split(".")[0]}</b>'
        )
        return text

    async def _handle_tracking(
            self,
            queue_tracking_ids: Queue,
            mapping_id_to_tracking: dict[int, TrackingModel]
    ):
        tracking = await self._get_tracking(
            queue_tracking_ids=queue_tracking_ids,
            mapping_id_to_tracking=mapping_id_to_tracking
        )
        rzd_parser = RZDParser()
        trains = await rzd_parser.get_trains(
            from_city_id=tracking.from_city_id,
            to_city_id=tracking.to_city_id,
            date=tracking.date
        )
        await rzd_parser.close_session()
        filtered_trains = filter_trains(
            trains=trains,
            max_price=tracking.max_price
        )
        async with async_session_maker() as session:
            tracking_manager = TrackingManager(session=session)
            tracking_notification_manager = TrackingNotificationManager(session=session)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
            #  –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç —É–∂–µ –±—ã–ª–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —ç—Ç–æ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é, —Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            last_notification_by_tracking = await tracking_notification_manager.get_last_notification_by_tracking_id(
                tracking_id=tracking.id
            )
            notification_waited_flag = (
                    last_notification_by_tracking is None
                    or (datetime.datetime.utcnow() - datetime.timedelta(
                minutes=5)) > last_notification_by_tracking.created_at
            )
            if notification_waited_flag and len(filtered_trains) > 0:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–π –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏
                if tracking.first_notification_sent_at is None:
                    await tracking_manager.update(
                        obj_id=tracking.id,
                        obj_in=TrackingUpdateSchema(first_notification_sent_at=datetime.datetime.utcnow())
                    )
                    tracking = await tracking_manager.get(tracking.id)
                await self._aiogram_bot.send_message(
                    chat_id=tracking.user_id,
                    text=self._generate_notification_text_from_trains(tracking=tracking, trains=filtered_trains),
                    parse_mode='HTML',
                    disable_web_page_preview=True,
                    reply_markup=found_seats_notification_kb(tracking_id=tracking.id)
                )
                #  –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                await tracking_notification_manager.create(TrackingNotificationCreateSchema(
                    tracking_id=tracking.id,
                    user_id=tracking.user_id
                ))
            await session.commit()

        logger.debug(f'#{tracking.id} handled')

        await self._put_tracking(
            tracking=tracking,
            queue_tracking_ids=queue_tracking_ids,
            mapping_id_to_tracking=mapping_id_to_tracking
        )

    async def _handle_tracking_with_exception_handling(
            self,
            queue_tracking_ids: Queue,
            mapping_id_to_tracking: dict[int, TrackingModel]
    ):
        self._current_parallel_handlers += 1
        try:
            await self._handle_tracking(
                queue_tracking_ids=queue_tracking_ids,
                mapping_id_to_tracking=mapping_id_to_tracking
            )
        except TrackingFinishedException:
            pass
        except TimeoutException:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–µ–º
            self._connection_errors_counter += 1
            if self._connection_errors_counter == 10:
                logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –†–ñ–î')
                self._connection_errors_counter = 0
        except JSONDecodeError as exc:
            logger.error(f'–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \n{exc.doc}')
        except Exception:
            logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:\n {traceback.format_exc()}')
        self._current_parallel_handlers -= 1

    async def start(self):
        logger.info('Background TrackingParser started')
        queue_tracking_ids: Queue = Queue()  # –û—á–µ—Ä–µ–¥—å, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
        mapping_id_to_tracking: dict[int, TrackingModel] = dict()  # {12: TrackingModel()}

        while True:
            logger.debug('–ó–∞–≤–µ—Ä—à–µ–Ω –∫—Ä—É–≥ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π')
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            async with async_session_maker() as session:
                tracking_manager = TrackingManager(session=session)
                trackings = await tracking_manager.get_all_tracking(only_active=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–∏ + –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            for tracking in trackings:
                if tracking.is_finished:
                    continue
                if tracking.user.is_banned:
                    continue
                if datetime.datetime.utcnow() > tracking.user.subscription_expires_at:
                    continue
                # –ï—Å–ª–∏ —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –Ω–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                if tracking.id not in mapping_id_to_tracking:
                    logger.info(f'Tracking #{tracking.id} added')
                    queue_tracking_ids.put(tracking.id)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
                # –û–±–Ω–æ–≤–ª—è–µ–º/–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ –¥–ª—è –±—É–¥—É—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                mapping_id_to_tracking[tracking.id] = tracking

            # –£–¥–∞–ª—è–µ–º —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏–Ω–≥–∏
            tracking_ids_from_database = set(map(lambda tracking: tracking.id, trackings))
            deleted_tracking_ids = list(filter(
                lambda tracking_id: tracking_id not in tracking_ids_from_database,
                mapping_id_to_tracking
            ))
            for deleted_tracking_id in deleted_tracking_ids:
                del mapping_id_to_tracking[deleted_tracking_id]

            # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
            i = 0
            while i < len(trackings):
                if self._current_parallel_handlers < self._limit_of_parallel_handlers and not queue_tracking_ids.empty():
                    asyncio.create_task(self._handle_tracking_with_exception_handling(
                        queue_tracking_ids=queue_tracking_ids,
                        mapping_id_to_tracking=mapping_id_to_tracking
                    ))
                    i += 1
                await asyncio.sleep(0.01)
